#ifndef __SX_1276_H__
#define __SX_1276_H__

#ifdef __cplusplus
 extern "C" {
#endif

#include <stdbool.h>
#include "FreeRTOS.h"
#include "task.h"
#include "spi-board.h"
#include "gpio-board.h"

#include "sx1276Regs-Fsk.h"
#include "sx1276Regs-LoRa.h"
//#include "radio.h"

/*
*   For SX1276IsChannelFree() function
*/
#define FSK_READ_RSSI_BW        0x02 // 125k ref: FskBandwidths
#define FSK_READ_RSSI_DELAY   2//[ms]

/*!
 * Radio wakeup time from SLEEP mode
 */
#ifdef TIMER_BASE_MS
#define RADIO_OSC_STARTUP                           1 // [ms]

/*!
 * Radio PLL lock and Mode Ready delay which can vary with the temperature
 */
#define RADIO_SLEEP_TO_RX                           2 // [ms]

/*!
 * Radio complete Wake-up Time with margin for temperature compensation
 */
 #if defined(SIPMODULE_BOARD )
#define RADIO_WAKEUP_TIME                           1
#else
#define RADIO_WAKEUP_TIME                           ( RADIO_OSC_STARTUP + RADIO_SLEEP_TO_RX )
#endif
#else
#define RADIO_WAKEUP_TIME                           1000 // [us]
#endif
/*!
 * Radio FSK modem parameters
 */
typedef struct
{
    int8_t   Power;
    uint32_t Fdev;
    uint32_t Bandwidth;
    uint32_t BandwidthAfc;
    uint32_t Datarate;
    uint16_t PreambleLen;
    bool     FixLen;
    uint8_t  PayloadLen;
    bool     CrcOn;
    bool     IqInverted;
    bool     RxContinuous;
    uint32_t TxTimeout;
}RadioFskSettings_t;

/*!
 * Radio FSK packet handler state
 */
typedef struct
{
    uint8_t  PreambleDetected;
    uint8_t  SyncWordDetected;
    int8_t   RssiValue;
    int32_t  AfcValue;
    uint8_t  RxGain;
    uint16_t Size;
    uint16_t NbBytes;
    uint8_t  FifoThresh;
    uint8_t  ChunkSize;
}RadioFskPacketHandler_t;

/*!
 * Radio LoRa modem parameters
 */
typedef struct
{
    int8_t   Power;
    uint32_t Bandwidth;
    uint32_t Datarate;
    bool     LowDatarateOptimize;
    uint8_t  Coderate;
    uint16_t PreambleLen;
    bool     FixLen;
    uint8_t  PayloadLen;
    bool     CrcOn;
    bool     FreqHopOn;
    uint8_t  HopPeriod;
    bool     IqInverted;
    bool     RxContinuous;
    uint32_t TxTimeout;
}RadioLoRaSettings_t;

/*!
 * Radio LoRa packet handler state
 */
typedef struct
{
    int8_t SnrValue;
    int16_t RssiValue;
    uint8_t Size;
}RadioLoRaPacketHandler_t;

/*!
 * Radio driver supported modems
 */
typedef enum
{
    MODEM_FSK = 0,
    MODEM_LORA,
}RadioModems_t;

/*!
 * Radio driver internal state machine states definition
 */
typedef enum
{
    RF_IDLE = 0,
    RF_RX_RUNNING,
    RF_TX_RUNNING,
    RF_CAD,
}RadioState_t;


/*!
 * Radio Settings
 */
typedef struct
{
    RadioState_t             State;
    RadioModems_t            Modem;
    uint32_t                 Channel;
    RadioFskSettings_t       Fsk;
    RadioFskPacketHandler_t  FskPacketHandler;
    RadioLoRaSettings_t      LoRa;
    RadioLoRaPacketHandler_t LoRaPacketHandler;
}RadioSettings_t;

/*!
 * Radio hardware and global parameters
 */
typedef struct SX1276_s
{
    Gpio_t        Reset;
    Gpio_t        DIO0;
    Gpio_t        DIO1;
    Gpio_t        DIO2;
    Gpio_t        DIO3;
    Gpio_t        DIO4;
    Gpio_t        DIO5;
    RadioSettings_t Settings;
}SX1276_t;

typedef enum SX1276DIO
{
    SX1276DIO0 = 0,
    SX1276DIO1,
    SX1276DIO2,
    SX1276DIO3,
    SX1276DIO4,
    SX1276DIO5,
}SX1276DIO_t;

/*!
 * Hardware IO IRQ callback function definition
 */
typedef void ( DioIrqHandler )( void );
typedef void( SX1276IrqHandler )(SX1276DIO_t status);

/*!
 * SX1276 definitions
 */
#define XTAL_FREQ                                   32000000
#define FREQ_STEP                                   61.03515625

#define RX_BUFFER_SIZE                              256

/*!
 * \brief Radio hardware registers initialization definition
 *
 * \remark Can be automatically generated by the SX1276 GUI (not yet implemented)
 */
#define RADIO_INIT_REGISTERS_VALUE                \
{                                                 \
    { MODEM_FSK , REG_LNA                , 0x23 },\
    { MODEM_FSK , REG_RXCONFIG           , 0x1E },\
    { MODEM_FSK , REG_RSSICONFIG         , 0xD2 },\
    { MODEM_FSK , REG_AFCFEI             , 0x01 },\
    { MODEM_FSK , REG_PREAMBLEDETECT     , 0xAA },\
    { MODEM_FSK , REG_OSC                , 0x07 },\
    { MODEM_FSK , REG_SYNCCONFIG         , 0x12 },\
    { MODEM_FSK , REG_SYNCVALUE1         , 0xC1 },\
    { MODEM_FSK , REG_SYNCVALUE2         , 0x94 },\
    { MODEM_FSK , REG_SYNCVALUE3         , 0xC1 },\
    { MODEM_FSK , REG_PACKETCONFIG1      , 0xD8 },\
    { MODEM_FSK , REG_FIFOTHRESH         , 0x8F },\
    { MODEM_FSK , REG_IMAGECAL           , 0x02 },\
    { MODEM_FSK , REG_DIOMAPPING1        , 0x00 },\
    { MODEM_FSK , REG_DIOMAPPING2        , 0x30 },\
    { MODEM_LORA, REG_LR_PAYLOADMAXLENGTH, 0x40 },\
}                                                 \

#define RF_MID_BAND_THRESH                          525000000


/*!
 * Constant values need to compute the RSSI value
 */
//#define RSSI_OFFSET_LF                              -164
//#ifdef SIPMODULE_BOARD
//#define RSSI_OFFSET_HF                              -147
//#else
//#define RSSI_OFFSET_HF                              -157
//#endif
void SX1276Reset( void );
void SX1276SetCallback(SX1276IrqHandler *irqHandler);
void SX1276Init( void);
static void RxChainCalibration( void );
void SX1276SetChannel( uint32_t freq );
void SX1276SetStatus( RadioState_t state );
RadioState_t SX1276GetStatus( void );
RadioModems_t SX1276GetModems( void );
bool SX1276IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh );
void SX1276SetSleep( void );
void SX1276SetStby( void );
int16_t SX1276ReadRssi( RadioModems_t modem );
void SX1276SetModem( RadioModems_t modem );
void SX1276SetOpMode( uint8_t opMode );
void SX1276SetRxConfig( RadioModems_t modem, uint32_t bandwidth,
                         uint32_t datarate, uint8_t coderate,
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous );
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout );

void SX1276Send( uint8_t *buffer, uint8_t size );
void SX1276SetRx( uint32_t timeout );
void SX1276SetTx( uint32_t timeout );
/*!
 * \brief Start a Channel Activity Detection
 */
void SX1276StartCad( void );
uint32_t SX1276Random( void );

void SX1276IoIrqInit( DioIrqHandler **irqHandlers );
void SX1276IoDeIrqInit(void);
void SX1276IoDeInit( void );
void SX1276IoInit( void );
uint8_t SX1276GetPaSelect( uint32_t channel );
void SX1276SetAntSwLowPower( bool status );
void SX1276AntSwInit( void );
void SX1276AntSwDeInit( void );
void SX1276SetAntSw( uint8_t rxTx );
bool SX1276CheckRfFrequency( uint32_t frequency );
uint32_t FskRXSyncWordTime(void);
uint8_t SX1276Read( uint8_t addr );
void SX1276ReadBuffer( uint8_t addr, uint8_t *buffer, uint8_t size );
void SX1276Write( uint8_t addr, uint8_t data );
void SX1276WriteBuffer( uint8_t addr, uint8_t *buffer, uint8_t size );
void SX1276WriteFifo( uint8_t *buffer, uint8_t size );
void SX1276ReadFifo( uint8_t *buffer, uint8_t size );
/*!
 * \brief Sets the maximum payload length.
 *
 * \param [IN] modem      Radio modem to be used [0: FSK, 1: LoRa]
 * \param [IN] max        Maximum payload length in bytes
 */
void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max );
bool SX1276GetRxContinuousStatus(RadioModems_t mode);
uint32_t SX1276GetCurrentFreq(void);
uint8_t readVersionID(void);
void SX1276GetPKTRSSIandSNR(int8_t *SnrValue, int16_t *RssiValue);
void SX1276SetRSSICalHF( int16_t offset);
void SX1276CleanFskPacket(void);
RadioFskPacketHandler_t* SX1276ReadFskPacket(void);
RadioFskSettings_t* SX1276ReadFskSettings(void);
RadioLoRaSettings_t* SX1276ReadLoRaSettings(void);
RadioLoRaPacketHandler_t* SX1276ReadLoRaPacket(void);
bool SX1276ReadLoRaHopOn(void);
uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint8_t pktLen );
/*
 * SX1276 DIO IRQ callback functions prototype
 */

/*!
 * \brief DIO 0 IRQ callback
 */
void SX1276OnDio0Irq( void );

/*!
 * \brief DIO 1 IRQ callback
 */
void SX1276OnDio1Irq( void );

/*!
 * \brief DIO 2 IRQ callback
 */
void SX1276OnDio2Irq( void );

/*!
 * \brief DIO 3 IRQ callback
 */
void SX1276OnDio3Irq( void );

/*!
 * \brief DIO 4 IRQ callback
 */
void SX1276OnDio4Irq( void );

/*!
 * \brief DIO 5 IRQ callback
 */
void SX1276OnDio5Irq( void );


#ifdef __cplusplus
}
#endif
#endif /*__SX_1276_H__*/
