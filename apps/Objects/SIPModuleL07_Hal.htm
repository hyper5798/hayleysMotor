<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\SIPModuleL07_Hal.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\SIPModuleL07_Hal.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060183: Last Updated: Fri Aug 16 15:43:29 2019
<BR><P>
<H3>Maximum Stack Usage =        992 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
UartTask &rArr; InitAtCommandList &rArr; LoadNodeConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[d9]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[e9]">ATCommandParser</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e9]">ATCommandParser</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1d]">ADC1_COMP_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[40]">CheckSensor1ReplyCallback</a> from uart_task.o(i.CheckSensor1ReplyCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[41]">CheckSensor2ReplyCallback</a> from uart_task.o(i.CheckSensor2ReplyCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[42]">CheckSensor3ReplyCallback</a> from uart_task.o(i.CheckSensor3ReplyCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[3a]">CountLPMCallback</a> from uart_task.o(i.CountLPMCallback) referenced 2 times from uart_task.o(i.UartTask)
 <LI><a href="#[1a]">DMA1_Channel1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[3d]">DetectResetDefaultCallback</a> from uart_task.o(i.DetectResetDefaultCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[46]">DownFBRiseCallback</a> from uart_task.o(i.DownFBRiseCallback) referenced from uart_task.o(i.addFBCallback)
 <LI><a href="#[16]">EXTI0_1_IRQHandler</a> from gpio-board.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[17]">EXTI2_3_IRQHandler</a> from gpio-board.o(i.EXTI2_3_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[18]">EXTI4_15_IRQHandler</a> from gpio-board.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[14]">FLASH_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[43]">GetSensorDataCallback</a> from uart_task.o(i.GetSensorDataCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[d]">HardFault_Handler</a> from stm32l0xx_it.o(i.HardFault_Handler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[27]">I2C1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[28]">I2C2_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[25]">I2C3_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[2e]">LCD_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1e]">LPTIM1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from stm32l0xx_it.o(i.NMI_Handler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[12]">PVD_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[15]">RCC_CRS_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[2d]">RNG_LPUART1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from rtc-board.o(i.RTC_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[4a]">RadioTask</a> from radio_task.o(i.RadioTask) referenced from main.o(i.main)
 <LI><a href="#[39]">RadioTaskCallback</a> from uart_task.o(i.RadioTaskCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[36]">RadioTimerCallback</a> from radio_task.o(i.RadioTimerCallback) referenced 3 times from radio_task.o(i.RadioTask)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[29]">SPI1_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[2a]">SPI2_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[e]">SVC_Handler</a> from port.o(i.SVC_Handler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[4d]">SX1276Callback</a> from radio_task.o(i.SX1276Callback) referenced from radio_task.o(i.radioInit)
 <LI><a href="#[6]">SX1276OnDio0Irq</a> from sx1276.o(i.SX1276OnDio0Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[7]">SX1276OnDio1Irq</a> from sx1276.o(i.SX1276OnDio1Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[8]">SX1276OnDio2Irq</a> from sx1276.o(i.SX1276OnDio2Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[9]">SX1276OnDio3Irq</a> from sx1276.o(i.SX1276OnDio3Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[a]">SX1276OnDio4Irq</a> from sx1276.o(i.SX1276OnDio4Irq) referenced 2 times from sx1276.o(.data)
 <LI><a href="#[37]">StopRadioTxDelay</a> from at_command_list.o(i.StopRadioTxDelay) referenced from at_command_list.o(i.StartRadioTxDelay)
 <LI><a href="#[10]">SysTick_Handler</a> from stm32l0xx_it.o(i.SysTick_Handler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_stm32l0xx.o(i.SystemInit) referenced from startup_stm32l073xx.o(.text)
 <LI><a href="#[24]">TIM21_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[26]">TIM22_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[20]">TIM2_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[21]">TIM3_IRQHandler</a> from hwtimer-board.o(i.TIM3_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[22]">TIM6_DAC_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[23]">TIM7_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[19]">TSC_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[44]">TXPPTimeout</a> from uart_task.o(i.TXPPTimeout) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[35]">TimerStateCallback</a> from timer_task.o(i.TimerStateCallback) referenced from timer_task.o(i.CreateTimerTaskQueue)
 <LI><a href="#[49]">TimerTask</a> from timer_task.o(i.TimerTask) referenced from main.o(i.main)
 <LI><a href="#[2b]">USART1_IRQHandler</a> from uart-board.o(i.USART1_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[2c]">USART2_IRQHandler</a> from uart-board.o(i.USART2_IRQHandler) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[1f]">USART4_5_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[2f]">USB_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[3c]">UartAlarmCallback</a> from uart_task.o(i.UartAlarmCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[38]">UartStateCallback</a> from uart_task.o(i.UartStateCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[4b]">UartTask</a> from uart_task.o(i.UartTask) referenced from main.o(i.main)
 <LI><a href="#[45]">UpFBRiseCallback</a> from uart_task.o(i.UpFBRiseCallback) referenced from uart_task.o(i.addFBCallback)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32l073xx.o(.text) referenced from startup_stm32l073xx.o(RESET)
 <LI><a href="#[3b]">WakeUpLPMCallback</a> from uart_task.o(i.WakeUpLPMCallback) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[3b]">WakeUpLPMCallback</a> from uart_task.o(i.WakeUpLPMCallback) referenced from uart_task.o(i.Uart_Disable)
 <LI><a href="#[3b]">WakeUpLPMCallback</a> from uart_task.o(i.WakeUpLPMCallback) referenced from at_command_list.o(i.commandSGPIO)
 <LI><a href="#[8c]">__main</a> from __main.o(!!!main) referenced from startup_stm32l073xx.o(.text)
 <LI><a href="#[33]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[34]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[55]">commandCAPORT</a> from at_command_list.o(i.commandCAPORT) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[75]">commandCAPPEUI</a> from at_command_list.o(i.commandCAPPEUI) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[73]">commandCAPPKEY</a> from at_command_list.o(i.commandCAPPKEY) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[72]">commandCAPPSKEY</a> from at_command_list.o(i.commandCAPPSKEY) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[56]">commandCBAP</a> from at_command_list.o(i.commandCBAP) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[61]">commandCCH</a> from at_command_list.o(i.commandCCH) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[60]">commandCCHO</a> from at_command_list.o(i.commandCCHO) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[63]">commandCCLASS</a> from at_command_list.o(i.commandCCLASS) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[74]">commandCDEVEUI</a> from at_command_list.o(i.commandCDEVEUI) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[5e]">commandCKEY</a> from at_command_list.o(i.commandCKEY) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[5f]">commandCMAC</a> from at_command_list.o(i.commandCMAC) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[71]">commandCNWKSKEY</a> from at_command_list.o(i.commandCNWKSKEY) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[64]">commandCPAE</a> from at_command_list.o(i.commandCPAE) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[59]">commandCPIN</a> from at_command_list.o(i.commandCPIN) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[5b]">commandCRPTM</a> from at_command_list.o(i.commandCRPTM) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[62]">commandCRXC</a> from at_command_list.o(i.commandCRXC) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[57]">commandCSF</a> from at_command_list.o(i.commandCSF) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[58]">commandCSID</a> from at_command_list.o(i.commandCSID) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[5a]">commandCSQ</a> from at_command_list.o(i.commandCSQ) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[54]">commandCSYNC</a> from at_command_list.o(i.commandCSYNC) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[5c]">commandCTXP</a> from at_command_list.o(i.commandCTXP) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[87]">commandCaliRSSI</a> from at_command_list.o(i.commandCaliRSSI) referenced from at_command_app.o(.constdata)
 <LI><a href="#[7b]">commandDOWNBACKPINC</a> from at_command_list.o(i.commandDOWNBACKPINC) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[52]">commandDRX</a> from at_command_list.o(i.commandDRX) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[51]">commandDRXI</a> from at_command_list.o(i.commandDRXI) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[53]">commandDTTX</a> from at_command_list.o(i.commandDTTX) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[50]">commandDTX</a> from at_command_list.o(i.commandDTX) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[6e]">commandECHO</a> from at_command_list.o(i.commandECHO) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[4f]">commandGADM</a> from at_command_list.o(i.commandGADM) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[81]">commandGCH</a> from at_command_list.o(i.commandGCH) referenced from at_command_app.o(.constdata)
 <LI><a href="#[80]">commandGCHO</a> from at_command_list.o(i.commandGCHO) referenced from at_command_app.o(.constdata)
 <LI><a href="#[89]">commandGCPW</a> from at_command_list.o(i.commandGCPW) referenced from at_command_app.o(.constdata)
 <LI><a href="#[82]">commandGGMD</a> from at_command_list.o(i.commandGGMD) referenced from at_command_app.o(.constdata)
 <LI><a href="#[7d]">commandGKEY</a> from at_command_list.o(i.commandGKEY) referenced from at_command_app.o(.constdata)
 <LI><a href="#[84]">commandGLMR</a> from at_command_list.o(i.commandGLMR) referenced from at_command_app.o(.constdata)
 <LI><a href="#[85]">commandGMTXP</a> from at_command_list.o(i.commandGMTXP) referenced from at_command_app.o(.constdata)
 <LI><a href="#[7e]">commandGPIN</a> from at_command_list.o(i.commandGPIN) referenced from at_command_app.o(.constdata)
 <LI><a href="#[5d]">commandGPT</a> from at_command_list.o(i.commandGPT) referenced 3 times from at_command_app.o(.constdata)
 <LI><a href="#[83]">commandGRST</a> from at_command_list.o(i.commandGRST) referenced from at_command_app.o(.constdata)
 <LI><a href="#[8b]">commandGRXC</a> from at_command_list.o(i.commandGRXC) referenced from at_command_app.o(.constdata)
 <LI><a href="#[88]">commandGSYSC</a> from at_command_list.o(i.commandGSYSC) referenced from at_command_app.o(.constdata)
 <LI><a href="#[7f]">commandGTXD</a> from at_command_list.o(i.commandGTXD) referenced from at_command_app.o(.constdata)
 <LI><a href="#[8a]">commandGUUID</a> from at_command_list.o(i.commandGUUID) referenced from at_command_app.o(.constdata)
 <LI><a href="#[6f]">commandIBR</a> from at_command_list.o(i.commandIBR) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[86]">commandIoTest</a> from at_command_list.o(i.commandIoTest) referenced from at_command_app.o(.constdata)
 <LI><a href="#[7c]">commandSDEVICETYPE</a> from at_command_list.o(i.commandSDEVICETYPE) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[69]">commandSGMD</a> from at_command_list.o(i.commandSGMD) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[67]">commandSGMI</a> from at_command_list.o(i.commandSGMI) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[68]">commandSGMM</a> from at_command_list.o(i.commandSGMM) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[66]">commandSGMR</a> from at_command_list.o(i.commandSGMR) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[6d]">commandSGPIO</a> from at_command_list.o(i.commandSGPIO) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[6c]">commandSIRQ</a> from at_command_list.o(i.commandSIRQ) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[65]">commandSLMR</a> from at_command_list.o(i.commandSLMR) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[76]">commandSPROFILE</a> from at_command_list.o(i.commandSPROFILE) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[70]">commandSPWMOD</a> from at_command_list.o(i.commandSPWMOD) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[6b]">commandSTIMER</a> from at_command_list.o(i.commandSTIMER) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[6a]">commandSTIMER1</a> from at_command_list.o(i.commandSTIMER1) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[78]">commandTESTBAT</a> from at_command_list.o(i.commandTESTBAT) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[79]">commandTESTPINC</a> from at_command_list.o(i.commandTESTPINC) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[77]">commandTESTPOWER</a> from at_command_list.o(i.commandTESTPOWER) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[7a]">commandUPBACKPINC</a> from at_command_list.o(i.commandUPBACKPINC) referenced 2 times from at_command_app.o(.constdata)
 <LI><a href="#[48]">dTTXCallback</a> from at_command_list.o(i.dTTXCallback) referenced from at_command_list.o(i.commandDTTX)
 <LI><a href="#[3f]">firstUartRTCAlarm</a> from uart_task.o(i.firstUartRTCAlarm) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[4e]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4c]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[3e]">sendBindAP</a> from uart_task.o(i.sendBindAP) referenced from uart_task.o(i.UartTask)
 <LI><a href="#[47]">stopMptorCallback</a> from uart_task.o(i.stopMptorCallback) referenced from uart_task.o(i.checkBTCommand)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[8c]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[8d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[8f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[276]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[277]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[278]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[b1]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[90]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[93]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[95]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[279]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[27a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[27b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[27c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[27d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[27e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[99]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[27f]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[280]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[281]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[282]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[283]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[284]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[285]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[286]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[287]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[288]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[289]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[28a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[28b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[28c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[28d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[28e]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[28f]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[290]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[291]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[292]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[293]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[294]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[8e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[295]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[9a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[9c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[296]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[9e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; BoardInitPeriph &rArr; RtcInit &rArr; RtcSetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[297]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[db]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[a1]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[298]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[26a]"></a>__asm___6_port_c_39a90d8d__prvPortStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[26b]"></a>ulSetInterruptMaskFromISR</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[26d]"></a>vClearInterruptMaskFromISR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreUserConfigToDefault
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAtConfig
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFBCallback
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFBRiseCallback
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcInterval
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFBRiseCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandAtHelp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPKEY
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRxConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[299]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>LCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l073xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32l073xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[210]"></a>__aeabi_uldivmod</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, lludiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[29a]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, lludiv.o(.text), UNUSED)

<P><STRONG><a name="[a6]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinTest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandUPBACKPINC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPOWER
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTBAT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPWMOD
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPROFILE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSLMR
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSIRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGPIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMM
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMI
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMD
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSDEVICETYPE
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIBR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGUUID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGTXD
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGSYSC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRXC
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPIN
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGMTXP
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGLMR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCPW
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCHO
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCH
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGADM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandECHO
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRX
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDOWNBACKPINC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCaliRSSI
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCTXP
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSYNC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSID
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSF
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRXC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRPTM
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCPIN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCPAE
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCDEVEUI
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCHO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCH
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCBAP
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPKEY
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPEUI
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPORT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
</UL>

<P><STRONG><a name="[a9]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[aa]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[a8]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[92]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[94]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[29b]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b2]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferKeyFromStrToNum
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converterStringToAscii
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
</UL>

<P><STRONG><a name="[b6]"></a>strtoul</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
</UL>

<P><STRONG><a name="[1bc]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserConfigFromEEPROM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRxConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
</UL>

<P><STRONG><a name="[b7]"></a>strncasecmp</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, strncasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_command_buffer
</UL>

<P><STRONG><a name="[b9]"></a>strcasecmp</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
</UL>

<P><STRONG><a name="[1e2]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUartImmediately
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_command_buffer
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converterStringToAscii
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCPW
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEndChar
</UL>

<P><STRONG><a name="[12e]"></a>strncmp</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTXPPdata
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTXCMdata
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGADM
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProductionTestCommand
</UL>

<P><STRONG><a name="[230]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandAtHelp
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPROFILE
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, rt_memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreUserConfigToDefault
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetNextChannel
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxChannel
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitNwkIds
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorConfig
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTXPPLable
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_previous_commandbuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPIN
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGLMR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCPW
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCDEVEUI
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPEUI
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXPPData
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[29c]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, rt_memcpy.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[be]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[bd]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreUserConfigToDefault
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMotorReply
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendControlPinReply
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_previous_commandbuffer
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPIN
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGLMR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCPW
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
</UL>

<P><STRONG><a name="[c2]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[e5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreUserConfigToDefault
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerTaskQueue
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTXPPLable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor3ReplyCallback
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor2ReplyCallback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor1ReplyCallback
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_STOP
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandAtHelp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPROFILE
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRxConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptConfigToEEPROM
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[c1]"></a>strncpy</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferKeyFromStrToNum
</UL>

<P><STRONG><a name="[140]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGpioStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitATInterrupt
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_previous_commandbuffer
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unUsedGpioInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_uread4</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetNextChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
</UL>

<P><STRONG><a name="[29e]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>__aeabi_uwrite4</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uwrite4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioChannelOnOffset
</UL>

<P><STRONG><a name="[29f]"></a>__rt_uwrite4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uwrite4.o(.text), UNUSED)

<P><STRONG><a name="[2a0]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerInit
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGTXD
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2a1]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPKTRSSIandSNR
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calADC
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandAtHelp
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irand
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>

<P><STRONG><a name="[2a2]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
</UL>

<P><STRONG><a name="[2a5]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxppConvertStringToNumerical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[c3]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[c6]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[22e]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[c7]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[c9]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[c8]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
</UL>

<P><STRONG><a name="[2a6]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxppConvertStringToNumerical
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[2a7]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[2a8]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxppConvertStringToNumerical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[2a9]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>__aeabi_l2d_normalise</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[cd]"></a>__aeabi_l2d</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>

<P><STRONG><a name="[2aa]"></a>_ll_sto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[cf]"></a>__aeabi_ul2d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfltl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[2ab]"></a>_ll_uto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dfltl.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxppConvertStringToNumerical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[2ac]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
</UL>

<P><STRONG><a name="[2ad]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[2ae]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[2af]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>

<P><STRONG><a name="[ae]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a7]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[d0]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[d2]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[96]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b4]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[ad]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d4]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[25f]"></a>_drnd</STRONG> (Thumb, 232 bytes, Stack size 20 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[2b0]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b1]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[d3]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[d6]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[9b]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a0]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d7]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[a4]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[2b2]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b3]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[2b4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2b6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>AES_CMAC_Final</STRONG> (Thumb, 452 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[e4]"></a>AES_CMAC_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AES_CMAC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[e6]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[e8]"></a>AES_CMAC_Update</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>

<P><STRONG><a name="[e9]"></a>ATCommandParser</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, at_command_app.o(i.ATCommandParser))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + In Cycle
<LI>Call Chain = ATCommandParser &rArr;  ATCommandParser (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreUserConfigToDefault
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_command_buffer
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandAtHelp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_previous_commandbuffer
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
</UL>

<P><STRONG><a name="[f1]"></a>AdcFormat</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, adc-board.o(i.AdcFormat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AdcFormat &rArr; HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
</UL>

<P><STRONG><a name="[f3]"></a>AdcInit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, adc-board.o(i.AdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = AdcInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcFormat
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calADC
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGPIO
</UL>

<P><STRONG><a name="[f5]"></a>AdcRead</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, adc-board.o(i.AdcRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AdcRead &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetState
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_CHSEL_Flags
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calADC
</UL>

<P><STRONG><a name="[ff]"></a>AddTimer</STRONG> (Thumb, 152 bytes, Stack size 64 bytes, timer_task.o(i.AddTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = AddTimer &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerStart
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRadioTxDelay
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBTCommand
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFBCallback
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
</UL>

<P><STRONG><a name="[103]"></a>BatDetect</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, uart_task.o(i.BatDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BatDetect &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTBAT
</UL>

<P><STRONG><a name="[18c]"></a>BoardGetEEPROMKey</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, board.o(i.BoardGetEEPROMKey))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[1f7]"></a>BoardGetPAEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.BoardGetPAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>

<P><STRONG><a name="[105]"></a>BoardInitPeriph</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, board.o(i.BoardInitPeriph))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = BoardInitPeriph &rArr; RtcInit &rArr; RtcSetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_STOP
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19e]"></a>BoardSetPAEnable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, board.o(i.BoardSetPAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[40]"></a>CheckSensor1ReplyCallback</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart_task.o(i.CheckSensor1ReplyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = CheckSensor1ReplyCallback &rArr; sendSensorData &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorDataCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[41]"></a>CheckSensor2ReplyCallback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart_task.o(i.CheckSensor2ReplyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = CheckSensor2ReplyCallback &rArr; sendSensorData &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorDataCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[42]"></a>CheckSensor3ReplyCallback</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uart_task.o(i.CheckSensor3ReplyCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = CheckSensor3ReplyCallback &rArr; sendSensorData &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[f7]"></a>Clean_CHSEL_Flags</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adc-board.o(i.Clean_CHSEL_Flags))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Clean_CHSEL_Flags &rArr; HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[10c]"></a>ComputeRxWindowParameters</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, loramac.o(i.ComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = ComputeRxWindowParameters &rArr; RegionCommonComputeRxWindowParameters &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeLoRa
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeSymbolTimeFsk
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[3a]"></a>CountLPMCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart_task.o(i.CountLPMCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CountLPMCallback &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[111]"></a>CreateTimerTaskQueue</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer_task.o(i.CreateTimerTaskQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CreateTimerTaskQueue &rArr; xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerSetCallback
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>DeInitMyPin</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, uart_task.o(i.DeInitMyPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DeInitMyPin &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Disable
</UL>

<P><STRONG><a name="[117]"></a>DeleteTimer</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, timer_task.o(i.DeleteTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DeleteTimer &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerStop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRadioTxDelayTimer
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBTCommand
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
</UL>

<P><STRONG><a name="[3d]"></a>DetectResetDefaultCallback</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, uart_task.o(i.DetectResetDefaultCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = DetectResetDefaultCallback &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreUserConfigToDefault
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[46]"></a>DownFBRiseCallback</STRONG> (Thumb, 144 bytes, Stack size 112 bytes, uart_task.o(i.DownFBRiseCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DownFBRiseCallback &rArr; MotorDown &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAtConfig
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDown
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.addFBCallback)
</UL>
<P><STRONG><a name="[16]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI0_1_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI2_3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI2_3_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, gpio-board.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EXTI4_15_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>EncryptConfigToEEPROM</STRONG> (Thumb, 56 bytes, Stack size 288 bytes, at_command_list.o(i.EncryptConfigToEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromWriteBufferWord
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
</UL>

<P><STRONG><a name="[19d]"></a>EngineerMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at_command_app.o(i.EngineerMode))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGADM
</UL>

<P><STRONG><a name="[121]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32l0xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[131]"></a>FifoFlush</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fifo.o(i.FifoFlush))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorDataCallback
</UL>

<P><STRONG><a name="[261]"></a>FifoInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fifo.o(i.FifoInit))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
</UL>

<P><STRONG><a name="[125]"></a>FifoPop</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, fifo.o(i.FifoPop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FifoPop &rArr; FifoNext &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[126]"></a>FifoPush</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fifo.o(i.FifoPush))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FifoPush &rArr; FifoNext &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoNext
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[11a]"></a>GetAtConfig</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_command_list.o(i.GetAtConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GetAtConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFBCallback
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFBRiseCallback
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcInterval
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFBRiseCallback
</UL>

<P><STRONG><a name="[1cc]"></a>GetCadBandwidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.GetCadBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1cd]"></a>GetCadDatarate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.GetCadDatarate))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1cb]"></a>GetCadFrequency</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.GetCadFrequency))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1ca]"></a>GetCadInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.GetCadInit))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1ce]"></a>GetCadPreambleLen</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.GetCadPreambleLen))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1cf]"></a>GetCadSymbolTimeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.GetCadSymbolTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[260]"></a>GetEEPROMConfig</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, at_command_list.o(i.GetEEPROMConfig))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendBindAP
</UL>

<P><STRONG><a name="[187]"></a>GetLowPowerModeFlag</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, at_command_list.o(i.GetLowPowerModeFlag))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitATInterrupt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[127]"></a>GetPinVoltage</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, at_command_list.o(i.GetPinVoltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GetPinVoltage &rArr; AdcInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGPIO
</UL>

<P><STRONG><a name="[12d]"></a>GetProductionTestCommand</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, at_command_list.o(i.GetProductionTestCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GetProductionTestCommand &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
</UL>

<P><STRONG><a name="[1d3]"></a>GetRadioDatarate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, loramac.o(i.GetRadioDatarate))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[222]"></a>GetRadioTxAckTimeoutRetryCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_task.o(i.GetRadioTxAckTimeoutRetryCount))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[12f]"></a>GetRemainTime</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, timer_task.o(i.GetRemainTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = GetRemainTime &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[188]"></a>GetReporterMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, at_command_list.o(i.GetReporterMode))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitATInterrupt
</UL>

<P><STRONG><a name="[130]"></a>GetSensorConfig</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at_command_list.o(i.GetSensorConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetSensorConfig &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[43]"></a>GetSensorDataCallback</STRONG> (Thumb, 158 bytes, Stack size 8 bytes, uart_task.o(i.GetSensorDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = GetSensorDataCallback &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoFlush
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max485RW
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor2ReplyCallback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor1ReplyCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[133]"></a>GetTXCMData</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, at_command_list.o(i.GetTXCMData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GetTXCMData &rArr; TxcmConvertStringToNumerical &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTXCMdata
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
</UL>

<P><STRONG><a name="[136]"></a>GetTXPPData</STRONG> (Thumb, 92 bytes, Stack size 88 bytes, at_command_list.o(i.GetTXPPData))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GetTXPPData &rArr; TxcmConvertStringToNumerical &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTXPPdata
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxppConvertStringToNumerical
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
</UL>

<P><STRONG><a name="[139]"></a>GpioDisableInterrupt</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, gpio-board.o(i.GpioDisableInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GpioDisableInterrupt &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeIrqInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[f4]"></a>GpioInit</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, gpio-board.o(i.GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGpioStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitATInterrupt
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxLED
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPINC0to7
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFBRiseCallback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Disable
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinTest
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR5V
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorUp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDown
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max485RW
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFBRiseCallback
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectResetDefaultCallback
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitMyPin
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatDetect
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unUsedGpioInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRXI
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>

<P><STRONG><a name="[119]"></a>GpioReadInput</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, gpio-board.o(i.GpioReadInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GpioReadInput
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGpioStatus
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPincStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFBRiseCallback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFBRiseCallback
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectResetDefaultCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
</UL>

<P><STRONG><a name="[13c]"></a>GpioSetInterrupt</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, gpio-board.o(i.GpioSetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GpioSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitATInterrupt
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Disable
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
</UL>

<P><STRONG><a name="[13f]"></a>GpioTest</STRONG> (Thumb, 356 bytes, Stack size 152 bytes, at_command_list.o(i.GpioTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = GpioTest &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIoTest
</UL>

<P><STRONG><a name="[104]"></a>GpioWrite</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, gpio-board.o(i.GpioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteBuffer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadBuffer
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxLED
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPINC0to7
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinTest
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR5V
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorUp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDown
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max485RW
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatDetect
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRXI
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>

<P><STRONG><a name="[f6]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32l0xx_hal_adc_ex.o(i.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADCEx_Calibration_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[f8]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clean_CHSEL_Flags
</UL>

<P><STRONG><a name="[fd]"></a>HAL_ADC_DeInit</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_DeInit &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[fb]"></a>HAL_ADC_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[fc]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[f2]"></a>HAL_ADC_Init</STRONG> (Thumb, 552 bytes, Stack size 8 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcFormat
</UL>

<P><STRONG><a name="[144]"></a>HAL_ADC_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[145]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_PollForConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[f9]"></a>HAL_ADC_Start</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[fe]"></a>HAL_ADC_Stop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.HAL_ADC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_Stop &rArr; ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
</UL>

<P><STRONG><a name="[1a4]"></a>HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromWriteBufferWord
</UL>

<P><STRONG><a name="[1a2]"></a>HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash_ex.o(i.HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromWriteBufferWord
</UL>

<P><STRONG><a name="[1a3]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromWriteBufferWord
</UL>

<P><STRONG><a name="[146]"></a>HAL_FLASH_Program</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Program_Word
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromWriteBufferWord
</UL>

<P><STRONG><a name="[1a1]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromWriteBufferWord
</UL>

<P><STRONG><a name="[17f]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 266 bytes, Stack size 20 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[148]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, gpio-board.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_3_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[13a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 472 bytes, Stack size 16 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioDisableInterrupt
</UL>

<P><STRONG><a name="[13b]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
</UL>

<P><STRONG><a name="[143]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
</UL>

<P><STRONG><a name="[dd]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ConversionStop
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[20a]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32l0xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[106]"></a>HAL_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32l0xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[149]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32l0xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[14a]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_msp_template.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[180]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>

<P><STRONG><a name="[13e]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>

<P><STRONG><a name="[13d]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>

<P><STRONG><a name="[15e]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32l0xx_hal_pwr.o(i.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[14d]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 610 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>

<P><STRONG><a name="[14e]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_STOP
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[151]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[20c]"></a>HAL_RCC_GetOscConfig</STRONG> (Thumb, 296 bytes, Stack size 0 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetOscConfig))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_STOP
</UL>

<P><STRONG><a name="[150]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[152]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[14f]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[153]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1684 bytes, Stack size 24 bytes, stm32l0xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig_STOP
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClockConfig
</UL>

<P><STRONG><a name="[156]"></a>HAL_RTCEx_AlarmBEventCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc_ex.o(i.HAL_RTCEx_AlarmBEventCallback))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[155]"></a>HAL_RTC_AlarmAEventCallback</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc-board.o(i.HAL_RTC_AlarmAEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>

<P><STRONG><a name="[154]"></a>HAL_RTC_AlarmIRQHandler</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_AlarmIRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmAEventCallback
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTCEx_AlarmBEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[157]"></a>HAL_RTC_DeactivateAlarm</STRONG> (Thumb, 274 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_DeactivateAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClearStatus
</UL>

<P><STRONG><a name="[158]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 88 bytes, Stack size 20 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[15a]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 104 bytes, Stack size 20 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[15b]"></a>HAL_RTC_Init</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetConfig
</UL>

<P><STRONG><a name="[15c]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 116 bytes, Stack size 104 bytes, rtc-board.o(i.HAL_RTC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[15f]"></a>HAL_RTC_SetAlarm_IT</STRONG> (Thumb, 590 bytes, Stack size 32 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetAlarm_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[161]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetDate &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetConfig
</UL>

<P><STRONG><a name="[163]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 336 bytes, Stack size 24 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RTC_SetTime &rArr; HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetConfig
</UL>

<P><STRONG><a name="[162]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[207]"></a>HAL_SPI_GetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[164]"></a>HAL_SPI_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInit
</UL>

<P><STRONG><a name="[165]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, spi-board.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_MspInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[166]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 894 bytes, Stack size 24 bytes, stm32l0xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[14b]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, stm32l0xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[168]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerInit
</UL>

<P><STRONG><a name="[169]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hwtimer-board.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[184]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerStart
</UL>

<P><STRONG><a name="[185]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerStop
</UL>

<P><STRONG><a name="[16c]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16b]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 380 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[16d]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16e]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hwtimer-board.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[170]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[176]"></a>HAL_UARTEx_WakeupCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_hal_uart_ex.o(i.HAL_UARTEx_WakeupCallback))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[171]"></a>HAL_UART_DeInit</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_DeInit &rArr; HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[173]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_ErrorCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 354 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_WakeupCallback
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[17a]"></a>HAL_UART_Init</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[172]"></a>HAL_UART_MspDeInit</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, uart-board.o(i.HAL_UART_MspDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_UART_MspDeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>

<P><STRONG><a name="[17b]"></a>HAL_UART_MspInit</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, uart-board.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[174]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
</UL>

<P><STRONG><a name="[181]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, uart-board.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[182]"></a>HAL_UART_Transmit</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar_NoIRQ
</UL>

<P><STRONG><a name="[215]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
</UL>

<P><STRONG><a name="[20f]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart-board.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>HwTimerInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hwtimer-board.o(i.HwTimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HwTimerInit &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerTaskQueue
</UL>

<P><STRONG><a name="[115]"></a>HwTimerSetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hwtimer-board.o(i.HwTimerSetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerTaskQueue
</UL>

<P><STRONG><a name="[101]"></a>HwTimerStart</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hwtimer-board.o(i.HwTimerStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HwTimerStart
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
</UL>

<P><STRONG><a name="[118]"></a>HwTimerStop</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hwtimer-board.o(i.HwTimerStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HwTimerStop
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask
</UL>

<P><STRONG><a name="[186]"></a>InitATInterrupt</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, at_command_list.o(i.InitATInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = InitATInterrupt &rArr; GpioSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLowPowerModeFlag
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetReporterMode
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGPIO
</UL>

<P><STRONG><a name="[189]"></a>InitAtCommandList</STRONG> (Thumb, 320 bytes, Stack size 152 bytes, at_command_list.o(i.InitAtCommandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = InitAtCommandList &rArr; LoadNodeConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassMode
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxChannel
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxBandwidth
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDefaultPower
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDatarate
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioChannelOnOffset
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxLED
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRSSICalHF
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineerMode
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardSetPAEnable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetEEPROMKey
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unUsedGpioInit
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFMappingTable
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baudRateMappingTable
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserConfigFromEEPROM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRxConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[1bb]"></a>InternalEepromReadBytes</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, eeprom-board.o(i.InternalEepromReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = InternalEepromReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserConfigFromEEPROM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRxConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
</UL>

<P><STRONG><a name="[120]"></a>InternalEepromWriteBufferWord</STRONG> (Thumb, 232 bytes, Stack size 40 bytes, eeprom-board.o(i.InternalEepromWriteBufferWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = InternalEepromWriteBufferWord &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_DATAEEPROM_DisableFixedTimeProgram
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptConfigToEEPROM
</UL>

<P><STRONG><a name="[221]"></a>IsFifoEmpty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(i.IsFifoEmpty))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[1d4]"></a>LoRaGetUpLinkCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.LoRaGetUpLinkCounter))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1a5]"></a>LoRaMacComputeMic</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRaMacComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParseFrame
</UL>

<P><STRONG><a name="[1a6]"></a>LoRaMacInitNwkIds</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, loramac.o(i.LoRaMacInitNwkIds))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LoRaMacInitNwkIds &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
</UL>

<P><STRONG><a name="[1a7]"></a>LoRaMacJoinComputeMic</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, loramaccrypto.o(i.LoRaMacJoinComputeMic))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = LoRaMacJoinComputeMic &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
</UL>

<P><STRONG><a name="[1a8]"></a>LoRaMacParseFrame</STRONG> (Thumb, 298 bytes, Stack size 88 bytes, loramac.o(i.LoRaMacParseFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LoRaMacParseFrame &rArr; LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1a9]"></a>LoRaMacPayloadDecrypt</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, loramaccrypto.o(i.LoRaMacPayloadDecrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LoRaMacPayloadDecrypt &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParseFrame
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserConfigFromEEPROM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRxConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
</UL>

<P><STRONG><a name="[11f]"></a>LoRaMacPayloadEncrypt</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, loramaccrypto.o(i.LoRaMacPayloadEncrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptConfigToEEPROM
</UL>

<P><STRONG><a name="[1aa]"></a>LoRaMacPrepareFrame</STRONG> (Thumb, 674 bytes, Stack size 56 bytes, loramac.o(i.LoRaMacPrepareFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LoRaMacPrepareFrame &rArr; SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacJoinComputeMic
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacComputeMic
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1ac]"></a>LoRaMacRxWindowSetup</STRONG> (Thumb, 94 bytes, Stack size 88 bytes, loramac.o(i.LoRaMacRxWindowSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = LoRaMacRxWindowSetup &rArr; SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1b1]"></a>LoRaMacRxWindown2Setup</STRONG> (Thumb, 258 bytes, Stack size 64 bytes, loramac.o(i.LoRaMacRxWindown2Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = LoRaMacRxWindown2Setup &rArr; SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassMode
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1b5]"></a>LoRaMacSendFrameOnChannel</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, loramac.o(i.LoRaMacSendFrameOnChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = LoRaMacSendFrameOnChannel &rArr; SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1b8]"></a>LoRaMacSetNextChannel</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, loramac.o(i.LoRaMacSetNextChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LoRaMacSetNextChannel &rArr; SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShufflePosition
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1d5]"></a>LoRaSetUpLinkCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.LoRaSetUpLinkCounter))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[18e]"></a>LoadAtConfigFromEEPROM</STRONG> (Thumb, 76 bytes, Stack size 56 bytes, at_command_list.o(i.LoadAtConfigFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = LoadAtConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromReadBytes
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[18f]"></a>LoadEngConfigFromEEPROM</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, at_command_list.o(i.LoadEngConfigFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = LoadEngConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromReadBytes
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[193]"></a>LoadLoRaWanFromEEPROM</STRONG> (Thumb, 354 bytes, Stack size 168 bytes, at_command_list.o(i.LoadLoRaWanFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = LoadLoRaWanFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromReadBytes
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[18d]"></a>LoadNodeConfigFromEEPROM</STRONG> (Thumb, 152 bytes, Stack size 264 bytes, at_command_list.o(i.LoadNodeConfigFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = LoadNodeConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromReadBytes
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[192]"></a>LoadOthersConfigFromEEPROM</STRONG> (Thumb, 168 bytes, Stack size 80 bytes, at_command_list.o(i.LoadOthersConfigFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = LoadOthersConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromReadBytes
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[191]"></a>LoadRxConfigFromEEPROM</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, at_command_list.o(i.LoadRxConfigFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LoadRxConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromReadBytes
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[190]"></a>LoadUserConfigFromEEPROM</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, at_command_list.o(i.LoadUserConfigFromEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = LoadUserConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadDecrypt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InternalEepromReadBytes
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[132]"></a>Max485RW</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, uart_task.o(i.Max485RW))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Max485RW &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toSleep
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorDataCallback
</UL>

<P><STRONG><a name="[11c]"></a>MotorDown</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, uart_task.o(i.MotorDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MotorDown &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopMptorCallback
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBTCommand
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFBRiseCallback
</UL>

<P><STRONG><a name="[1c0]"></a>MotorUp</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, uart_task.o(i.MotorUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MotorUp &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopMptorCallback
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBTCommand
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFBRiseCallback
</UL>

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32l0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>PWR5V</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, uart_task.o(i.PWR5V))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = PWR5V &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toSleep
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPOWER
</UL>

<P><STRONG><a name="[1c2]"></a>PinTest</STRONG> (Thumb, 68 bytes, Stack size 72 bytes, uart_task.o(i.PinTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = PinTest &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPINName
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPINC
</UL>

<P><STRONG><a name="[159]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[160]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32l0xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
</UL>

<P><STRONG><a name="[15d]"></a>RTC_EnterInitMode</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32l0xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc-board.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTC_IRQHandler &rArr; HAL_RTC_AlarmIRQHandler &rArr; HAL_RTC_AlarmAEventCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_AlarmIRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RadioTask</STRONG> (Thumb, 3062 bytes, Stack size 392 bytes, radio_task.o(i.RadioTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = RadioTask &rArr; LoRaMacRxWindowSetup &rArr; SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoDeIrqInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetStatus
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPKTRSSIandSNR
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaSetUpLinkCounter
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetNextChannel
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindowSetup
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacParseFrame
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaGetUpLinkCounter
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadioDatarate
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCadSymbolTimeout
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCadPreambleLen
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCadInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCadFrequency
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCadDatarate
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCadBandwidth
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRxWindowParameters
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[39]"></a>RadioTaskCallback</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, uart_task.o(i.RadioTaskCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioTaskCallback &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[36]"></a>RadioTimerCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio_task.o(i.RadioTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = RadioTimerCallback &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_task.o(i.RadioTask)
</UL>
<P><STRONG><a name="[1a0]"></a>RadioTxLED</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, at_command_list.o(i.RadioTxLED))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioTxLED &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
</UL>

<P><STRONG><a name="[1db]"></a>ReadGpioStatus</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, at_command_list.o(i.ReadGpioStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ReadGpioStatus &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGPIO
</UL>

<P><STRONG><a name="[1dc]"></a>ReceiveRadioRxData</STRONG> (Thumb, 182 bytes, Stack size 96 bytes, at_command_list.o(i.ReceiveRadioRxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = ReceiveRadioRxData &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[10f]"></a>RegionCommonComputeRxWindowParameters</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, loramac.o(i.RegionCommonComputeRxWindowParameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RegionCommonComputeRxWindowParameters &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[10d]"></a>RegionCommonComputeSymbolTimeFsk</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, loramac.o(i.RegionCommonComputeSymbolTimeFsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RegionCommonComputeSymbolTimeFsk &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[10e]"></a>RegionCommonComputeSymbolTimeLoRa</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, loramac.o(i.RegionCommonComputeSymbolTimeLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RegionCommonComputeSymbolTimeLoRa &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeRxWindowParameters
</UL>

<P><STRONG><a name="[1e1]"></a>RemoveEndChar</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utilities.o(i.RemoveEndChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RemoveEndChar &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTXPPdata
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parseTXCMdata
</UL>

<P><STRONG><a name="[ee]"></a>RestoreUserConfigToDefault</STRONG> (Thumb, 278 bytes, Stack size 8 bytes, at_command_list.o(i.RestoreUserConfigToDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RestoreUserConfigToDefault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectResetDefaultCallback
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
</UL>

<P><STRONG><a name="[1e3]"></a>RtcClearStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rtc-board.o(i.RtcClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RtcClearStatus &rArr; HAL_RTC_DeactivateAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_DeactivateAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
</UL>

<P><STRONG><a name="[10a]"></a>RtcInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtc-board.o(i.RtcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = RtcInit &rArr; RtcSetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[21a]"></a>RtcSetAlarmCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc-board.o(i.RtcSetAlarmCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[1e4]"></a>RtcSetConfig</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, rtc-board.o(i.RtcSetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = RtcSetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcInit
</UL>

<P><STRONG><a name="[1e5]"></a>RtcStartWakeUpAlarm</STRONG> (Thumb, 406 bytes, Stack size 120 bytes, rtc-board.o(i.RtcStartWakeUpAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RtcStartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetAlarm_IT
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcClearStatus
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toSleep
</UL>

<P><STRONG><a name="[e]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[1e7]"></a>SX1276AntSwDeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sx1276.o(i.SX1276AntSwDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276AntSwDeInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[1e8]"></a>SX1276AntSwInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1276.o(i.SX1276AntSwInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276AntSwInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
</UL>

<P><STRONG><a name="[4d]"></a>SX1276Callback</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, radio_task.o(i.SX1276Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276Callback &rArr; SendQueueToRadioFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadioFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_task.o(i.radioInit)
</UL>
<P><STRONG><a name="[1ea]"></a>SX1276GetCurrentFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetCurrentFreq))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPKTRSSIandSNR
</UL>

<P><STRONG><a name="[1d7]"></a>SX1276GetPKTRSSIandSNR</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, sx1276.o(i.SX1276GetPKTRSSIandSNR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276GetPKTRSSIandSNR &rArr; SX1276Read &rArr; SpiReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetCurrentFreq
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1fa]"></a>SX1276GetPaSelect</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
</UL>

<P><STRONG><a name="[1ad]"></a>SX1276GetStatus</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindowSetup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1c9]"></a>SX1276GetTimeOnAir</STRONG> (Thumb, 640 bytes, Stack size 120 bytes, sx1276.o(i.SX1276GetTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SX1276GetTimeOnAir &rArr; SX1276Read &rArr; SpiReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1d8]"></a>SX1276Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, sx1276.o(i.SX1276Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SX1276Init &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoIrqInit
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1c6]"></a>SX1276IoDeIrqInit</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sx1276.o(i.SX1276IoDeIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX1276IoDeIrqInit &rArr; GpioDisableInterrupt &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioDisableInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1f1]"></a>SX1276IoInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, sx1276.o(i.SX1276IoInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276IoInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[1f0]"></a>SX1276IoIrqInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sx1276.o(i.SX1276IoIrqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276IoIrqInit &rArr; GpioSetInterrupt &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[1ba]"></a>SX1276IsChannelFree</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, sx1276.o(i.SX1276IsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276IsChannelFree &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetNextChannel
</UL>

<P><STRONG><a name="[6]"></a>SX1276OnDio0Irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio0Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276OnDio0Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>SX1276OnDio1Irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio1Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276OnDio1Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>SX1276OnDio2Irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio2Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276OnDio2Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>SX1276OnDio3Irq</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio3Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276OnDio3Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>SX1276OnDio4Irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1276.o(i.SX1276OnDio4Irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1276OnDio4Irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sx1276.o(.data)
</UL>
<P><STRONG><a name="[1ab]"></a>SX1276Random</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Random))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276Random &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPrepareFrame
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[1d0]"></a>SX1276Read</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276Read &rArr; SpiReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVersionID
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPKTRSSIandSNR
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[1d6]"></a>SX1276ReadFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276ReadFifo &rArr; SpiReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1f2]"></a>SX1276ReadRssi</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, sx1276.o(i.SX1276ReadRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276ReadRssi &rArr; SX1276Read &rArr; SpiReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
</UL>

<P><STRONG><a name="[1ee]"></a>SX1276Reset</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX1276Reset &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[1b7]"></a>SX1276Send</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, sx1276.o(i.SX1276Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SX1276Send &rArr; SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1f6]"></a>SX1276SetAntSw</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetAntSw))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1276SetAntSw &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardGetPAEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[1f8]"></a>SX1276SetAntSwLowPower</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetAntSwLowPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1276SetAntSwLowPower &rArr; SX1276AntSwInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwInit
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276AntSwDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>

<P><STRONG><a name="[25c]"></a>SX1276SetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276SetCallback))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[1ae]"></a>SX1276SetChannel</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sx1276.o(i.SX1276SetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetChannel &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindowSetup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[1b4]"></a>SX1276SetMaxPayloadLength</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SX1276SetMaxPayloadLength &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
</UL>

<P><STRONG><a name="[1d9]"></a>SX1276SetModem</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
</UL>

<P><STRONG><a name="[1ef]"></a>SX1276SetOpMode</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetOpMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSwLowPower
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetAntSw
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetStby
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
</UL>

<P><STRONG><a name="[19c]"></a>SX1276SetRSSICalHF</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx1276.o(i.SX1276SetRSSICalHF))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCaliRSSI
</UL>

<P><STRONG><a name="[1b0]"></a>SX1276SetRx</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276SetRx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindowSetup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1af]"></a>SX1276SetRxConfig</STRONG> (Thumb, 654 bytes, Stack size 56 bytes, sx1276.o(i.SX1276SetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetFskBandwidthRegValue
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindowSetup
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1c5]"></a>SX1276SetSleep</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetSleep &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
</UL>

<P><STRONG><a name="[1c4]"></a>SX1276SetStby</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1276.o(i.SX1276SetStby))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276SetStby &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1f5]"></a>SX1276SetTx</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, sx1276.o(i.SX1276SetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SX1276SetTx &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[1b6]"></a>SX1276SetTxConfig</STRONG> (Thumb, 796 bytes, Stack size 56 bytes, sx1276.o(i.SX1276SetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SX1276SetTxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetPaSelect
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSendFrameOnChannel
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1d2]"></a>SX1276StartCad</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, sx1276.o(i.SX1276StartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SX1276StartCad &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[1d1]"></a>SX1276Write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sx1276.o(i.SX1276Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276StartCad
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTxConfig
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRx
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetMaxPayloadLength
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetTx
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxChainCalibration
</UL>

<P><STRONG><a name="[1f4]"></a>SX1276WriteFifo</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sx1276.o(i.SX1276WriteFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SX1276WriteFifo &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
</UL>

<P><STRONG><a name="[ef]"></a>SaveConfigToEEPROM</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, at_command_list.o(i.SaveConfigToEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EncryptConfigToEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectResetDefaultCallback
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRST
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadUserConfigFromEEPROM
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadRxConfigFromEEPROM
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadOthersConfigFromEEPROM
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadLoRaWanFromEEPROM
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadEngConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
</UL>

<P><STRONG><a name="[21f]"></a>SaveSensorData</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, uart_task.o(i.SaveSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SaveSensorData
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[1fc]"></a>SendBackToUart</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, uart_task.o(i.SendBackToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SendBackToUart &rArr; UartPutChar_NoIRQ &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar_NoIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[141]"></a>SendMsgToUart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, uart_task.o(i.SendMsgToUart))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinTest
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_result
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandUPBACKPINC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPOWER
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPINC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTBAT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPWMOD
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPROFILE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSLMR
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSIRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGPIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMM
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMI
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMD
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSDEVICETYPE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIoTest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIBR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGUUID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGTXD
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGSYSC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRXC
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPIN
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGMTXP
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGLMR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCPW
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCHO
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCH
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGADM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandECHO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRXI
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRX
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDOWNBACKPINC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCaliRSSI
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCTXP
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSYNC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSID
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSF
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRXC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRPTM
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCPIN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCPAE
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCDEVEUI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCLASS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCHO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCH
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCBAP
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPKEY
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPEUI
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPORT
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
</UL>

<P><STRONG><a name="[1da]"></a>SendQueueToRadio</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, radio_task.o(i.SendQueueToRadio))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimerCallback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueryPinReply
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMotorReply
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendControlPinReply
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendBindAP
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dTTXCallback
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
</UL>

<P><STRONG><a name="[1e9]"></a>SendQueueToRadioFromISR</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, radio_task.o(i.SendQueueToRadioFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SendQueueToRadioFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Callback
</UL>

<P><STRONG><a name="[110]"></a>SendQueueToUartTask</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, uart_task.o(i.SendQueueToUartTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;firstUartRTCAlarm
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TXPPTimeout
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTaskCallback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorDataCallback
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectResetDefaultCallback
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CountLPMCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIBR
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandECHO
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRadioTxDelay
</UL>

<P><STRONG><a name="[1ff]"></a>SendQueueToUartTaskFromISR</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, uart_task.o(i.SendQueueToUartTaskFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SendQueueToUartTaskFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WakeUpLPMCallback
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartStateCallback
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartAlarmCallback
</UL>

<P><STRONG><a name="[200]"></a>SendToUartImmediately</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart_task.o(i.SendToUartImmediately))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SendToUartImmediately &rArr; UartPutChar_NoIRQ &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar_NoIRQ
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandAtHelp
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIBR
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRX
</UL>

<P><STRONG><a name="[201]"></a>SensorBaudRate</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, uart_task.o(i.SensorBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SensorBaudRate &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
</UL>

<P><STRONG><a name="[264]"></a>SensorDB</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart_task.o(i.SensorDB))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
</UL>

<P><STRONG><a name="[262]"></a>SensorParity</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart_task.o(i.SensorParity))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
</UL>

<P><STRONG><a name="[263]"></a>SensorSB</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, uart_task.o(i.SensorSB))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
</UL>

<P><STRONG><a name="[19a]"></a>SetClassMode</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, radio_task.o(i.SetClassMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SetClassMode &rArr; LoRaMacRxWindown2Setup &rArr; SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacRxWindown2Setup
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCLASS
</UL>

<P><STRONG><a name="[237]"></a>SetPingPongMaxTxNumOrRxTimeIdx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart_task.o(i.SetPingPongMaxTxNumOrRxTimeIdx))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
</UL>

<P><STRONG><a name="[217]"></a>SetRadioCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, radio_task.o(i.SetRadioCallback))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[195]"></a>SetRadioChannelOnOffset</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, loramac.o(i.SetRadioChannelOnOffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetRadioChannelOnOffset
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uwrite4
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCHO
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCH
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCHO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCH
</UL>

<P><STRONG><a name="[197]"></a>SetRadioDatarate</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.SetRadioDatarate))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSF
</UL>

<P><STRONG><a name="[19b]"></a>SetRadioDefaultPower</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.SetRadioDefaultPower))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCTXP
</UL>

<P><STRONG><a name="[199]"></a>SetRadioRxBandwidth</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, loramac.o(i.SetRadioRxBandwidth))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRXC
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRXC
</UL>

<P><STRONG><a name="[198]"></a>SetRadioRxChannel</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, loramac.o(i.SetRadioRxChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetRadioRxChannel &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRXC
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCH
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSF
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRXC
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCH
</UL>

<P><STRONG><a name="[203]"></a>SetRtcInterval</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, uart_task.o(i.SetRtcInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SetRtcInterval &rArr; GetAtConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAtConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[227]"></a>SetTXPPFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at_command_list.o(i.SetTXPPFlag))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[204]"></a>SetTXPPLable</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart_task.o(i.SetTXPPLable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetTXPPLable &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
</UL>

<P><STRONG><a name="[1b9]"></a>ShufflePosition</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, utilities.o(i.ShufflePosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ShufflePosition &rArr; irand &rArr; rand1
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irand
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacSetNextChannel
</UL>

<P><STRONG><a name="[206]"></a>SpiInOut</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, spi-board.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiWriteBuffer
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiReadBuffer
</UL>

<P><STRONG><a name="[109]"></a>SpiInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi-board.o(i.SpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpiInit &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[1f3]"></a>SpiReadBuffer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, spi-board.o(i.SpiReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpiReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadFifo
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>

<P><STRONG><a name="[1fb]"></a>SpiWriteBuffer</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, spi-board.o(i.SpiWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276WriteFifo
</UL>

<P><STRONG><a name="[208]"></a>StartRadioTxDelay</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_command_list.o(i.StartRadioTxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = StartRadioTxDelay &rArr; AddTimer &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[37]"></a>StopRadioTxDelay</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, at_command_list.o(i.StopRadioTxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = StopRadioTxDelay &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_list.o(i.StartRadioTxDelay)
</UL>
<P><STRONG><a name="[209]"></a>StopRadioTxDelayTimer</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, at_command_list.o(i.StopRadioTxDelayTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = StopRadioTxDelayTimer &rArr; DeleteTimer &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32l0xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[107]"></a>SystemClockConfig</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, board.o(i.SystemClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClockConfig &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[108]"></a>SystemClockConfig_STOP</STRONG> (Thumb, 156 bytes, Stack size 80 bytes, board.o(i.SystemClockConfig_STOP))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SystemClockConfig_STOP &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetOscConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, system_stm32l0xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(.text)
</UL>
<P><STRONG><a name="[21]"></a>TIM3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, hwtimer-board.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TXPPTimeout</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, uart_task.o(i.TXPPTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TXPPTimeout &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[35]"></a>TimerStateCallback</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, timer_task.o(i.TimerStateCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TimerStateCallback &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer_task.o(i.CreateTimerTaskQueue)
</UL>
<P><STRONG><a name="[49]"></a>TimerTask</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, timer_task.o(i.TimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TimerTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HwTimerStop
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[20d]"></a>TransferKeyFromStrToNum</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, utilities.o(i.TransferKeyFromStrToNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TransferKeyFromStrToNum &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
</UL>

<P><STRONG><a name="[135]"></a>TxcmConvertStringToNumerical</STRONG> (Thumb, 742 bytes, Stack size 104 bytes, at_command_list.o(i.TxcmConvertStringToNumerical))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TxcmConvertStringToNumerical &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXPPData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXCMData
</UL>

<P><STRONG><a name="[138]"></a>TxppConvertStringToNumerical</STRONG> (Thumb, 368 bytes, Stack size 104 bytes, at_command_list.o(i.TxppConvertStringToNumerical))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TxppConvertStringToNumerical &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXPPData
</UL>

<P><STRONG><a name="[17d]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 240 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_AdvFeatureConfig))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17e]"></a>UART_CheckIdleState</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[17c]"></a>UART_SetConfig</STRONG> (Thumb, 1220 bytes, Stack size 88 bytes, stm32l0xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[183]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, stm32l0xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2b]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart-board.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, uart-board.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l073xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>UartAlarmCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_task.o(i.UartAlarmCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UartAlarmCallback &rArr; SendQueueToUartTaskFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[211]"></a>UartConfig</STRONG> (Thumb, 352 bytes, Stack size 152 bytes, uart-board.o(i.UartConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = UartConfig &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
</UL>

<P><STRONG><a name="[212]"></a>UartDeInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, uart-board.o(i.UartDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UartDeInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Disable
</UL>

<P><STRONG><a name="[213]"></a>UartInit</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, uart-board.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UartInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
</UL>

<P><STRONG><a name="[214]"></a>UartPutChar</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart-board.o(i.UartPutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UartPutChar &rArr; HAL_UART_Transmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBTCommand
</UL>

<P><STRONG><a name="[1fd]"></a>UartPutChar_NoIRQ</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, uart-board.o(i.UartPutChar_NoIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UartPutChar_NoIRQ &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUartImmediately
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackToUart
</UL>

<P><STRONG><a name="[216]"></a>UartSetIrqHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart-board.o(i.UartSetIrqHandler))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[38]"></a>UartStateCallback</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, uart_task.o(i.UartStateCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UartStateCallback &rArr; SendQueueToUartTaskFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTaskFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[4b]"></a>UartTask</STRONG> (Thumb, 3128 bytes, Stack size 176 bytes, uart_task.o(i.UartTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 992 + Unknown Stack Size
<LI>Call Chain = UartTask &rArr; InitAtCommandList &rArr; LoadNodeConfigFromEEPROM &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemainTime
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcSetAlarmCallback
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioCallback
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRadioTxAckTimeoutRetryCount
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartSetIrqHandler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StopRadioTxDelayTimer
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartRadioTxDelay
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTXPPFlag
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxLED
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsFifoEmpty
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioDisableInterrupt
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorConfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetLowPowerModeFlag
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAtConfig
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;toSleep
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendQueryPinReply
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendMotorReply
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendControlPinReply
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendBindAP
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initPINC0to7
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPincStatus
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBTCommand
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calADC
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addFBCallback
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Disable
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRtcInterval
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUartImmediately
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendBackToUart
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveSensorData
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR5V
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorUp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDown
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max485RW
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSensorDataCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatDetect
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21c]"></a>Uart_Disable</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, uart_task.o(i.Uart_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Uart_Disable &rArr; DeInitMyPin &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartDeInit
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitMyPin
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[45]"></a>UpFBRiseCallback</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, uart_task.o(i.UpFBRiseCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = UpFBRiseCallback &rArr; MotorUp &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAtConfig
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorUp
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.addFBCallback)
</UL>
<P><STRONG><a name="[3b]"></a>WakeUpLPMCallback</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart_task.o(i.WakeUpLPMCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = WakeUpLPMCallback &rArr; SendQueueToUartTaskFromISR &rArr; xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTaskFromISR
</UL>
<BR>[Address Reference Count : 3]<UL><LI> uart_task.o(i.UartTask)
<LI> uart_task.o(i.Uart_Disable)
<LI> at_command_list.o(i.commandSGPIO)
</UL>
<P><STRONG><a name="[11b]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, radio_task.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Callback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioSetInterrupt
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getPINName
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpFBRiseCallback
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorBaudRate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DownFBRiseCallback
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baudRateMappingTable
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b0]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[218]"></a>addFBCallback</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, uart_task.o(i.addFBCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = addFBCallback &rArr; AddTimer &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAtConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[e3]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>

<P><STRONG><a name="[e7]"></a>aes_set_key</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacPayloadEncrypt
</UL>

<P><STRONG><a name="[ea]"></a>backup_previous_commandbuffer</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, at_command_app.o(i.backup_previous_commandbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = backup_previous_commandbuffer &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
</UL>

<P><STRONG><a name="[19f]"></a>baudRateMappingTable</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, at_command_list.o(i.baudRateMappingTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = baudRateMappingTable &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIBR
</UL>

<P><STRONG><a name="[21e]"></a>calADC</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, uart_task.o(i.calADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = calADC &rArr; AdcInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcRead
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTBAT
</UL>

<P><STRONG><a name="[1de]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ceil &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegionCommonComputeRxWindowParameters
</UL>

<P><STRONG><a name="[220]"></a>checkBTCommand</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, uart_task.o(i.checkBTCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = checkBTCommand &rArr; AddTimer &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutChar
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorUp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDown
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[22f]"></a>checkVauleFormate</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, at_command_list.o(i.checkVauleFormate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = checkVauleFormate &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converterStringToAscii
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPIN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCDEVEUI
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPKEY
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPEUI
</UL>

<P><STRONG><a name="[ec]"></a>commandAtHelp</STRONG> (Thumb, 150 bytes, Stack size 136 bytes, at_command_app.o(i.commandAtHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = commandAtHelp &rArr; SendToUartImmediately &rArr; UartPutChar_NoIRQ &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUartImmediately
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
</UL>

<P><STRONG><a name="[55]"></a>commandCAPORT</STRONG> (Thumb, 114 bytes, Stack size 104 bytes, at_command_list.o(i.commandCAPORT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCAPORT &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>commandCAPPEUI</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, at_command_list.o(i.commandCAPPEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCAPPEUI &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>commandCAPPKEY</STRONG> (Thumb, 118 bytes, Stack size 104 bytes, at_command_list.o(i.commandCAPPKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCAPPKEY &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>commandCAPPSKEY</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, at_command_list.o(i.commandCAPPSKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCAPPSKEY &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcStd16
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferKeyFromStrToNum
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>commandCBAP</STRONG> (Thumb, 126 bytes, Stack size 104 bytes, at_command_list.o(i.commandCBAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCBAP &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>commandCCH</STRONG> (Thumb, 282 bytes, Stack size 112 bytes, at_command_list.o(i.commandCCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = commandCCH &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxChannel
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioChannelOnOffset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFMappingTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>commandCCHO</STRONG> (Thumb, 180 bytes, Stack size 104 bytes, at_command_list.o(i.commandCCHO))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCCHO &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioChannelOnOffset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>commandCCLASS</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, at_command_list.o(i.commandCCLASS))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = commandCCLASS &rArr; SetClassMode &rArr; LoRaMacRxWindown2Setup &rArr; SX1276SetRxConfig &rArr; SX1276SetModem &rArr; SX1276SetOpMode &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassMode
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>commandCDEVEUI</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, at_command_list.o(i.commandCDEVEUI))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCDEVEUI &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>commandCKEY</STRONG> (Thumb, 264 bytes, Stack size 120 bytes, at_command_list.o(i.commandCKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = commandCKEY &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcStd16
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferKeyFromStrToNum
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>commandCMAC</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, at_command_list.o(i.commandCMAC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCMAC &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>commandCNWKSKEY</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, at_command_list.o(i.commandCNWKSKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCNWKSKEY &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcStd16
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferKeyFromStrToNum
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>commandCPAE</STRONG> (Thumb, 120 bytes, Stack size 104 bytes, at_command_list.o(i.commandCPAE))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCPAE &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>commandCPIN</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, at_command_list.o(i.commandCPIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = commandCPIN &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>commandCRPTM</STRONG> (Thumb, 120 bytes, Stack size 104 bytes, at_command_list.o(i.commandCRPTM))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCRPTM &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>commandCRXC</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, at_command_list.o(i.commandCRXC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCRXC &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxChannel
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxBandwidth
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFMappingTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>commandCSF</STRONG> (Thumb, 200 bytes, Stack size 104 bytes, at_command_list.o(i.commandCSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCSF &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxChannel
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDatarate
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFMappingTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>commandCSID</STRONG> (Thumb, 68 bytes, Stack size 104 bytes, at_command_list.o(i.commandCSID))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCSID &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>commandCSQ</STRONG> (Thumb, 322 bytes, Stack size 296 bytes, at_command_list.o(i.commandCSQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 472 + Unknown Stack Size
<LI>Call Chain = commandCSQ &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetSleep
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetOpMode
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276ReadRssi
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>commandCSYNC</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, at_command_list.o(i.commandCSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCSYNC &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>commandCTXP</STRONG> (Thumb, 156 bytes, Stack size 104 bytes, at_command_list.o(i.commandCTXP))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCTXP &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioDefaultPower
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>commandCaliRSSI</STRONG> (Thumb, 102 bytes, Stack size 104 bytes, at_command_list.o(i.commandCaliRSSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandCaliRSSI &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRSSICalHF
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>commandDOWNBACKPINC</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, at_command_list.o(i.commandDOWNBACKPINC))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = commandDOWNBACKPINC &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>commandDRX</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, at_command_list.o(i.commandDRX))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = commandDRX &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUartImmediately
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>commandDRXI</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, at_command_list.o(i.commandDRXI))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = commandDRXI &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>commandDTTX</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, at_command_list.o(i.commandDTTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = commandDTTX &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxLED
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>commandDTX</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, at_command_list.o(i.commandDTX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = commandDTX &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxLED
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;converterStringToAscii
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>commandECHO</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, at_command_list.o(i.commandECHO))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandECHO &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>commandGADM</STRONG> (Thumb, 182 bytes, Stack size 104 bytes, at_command_list.o(i.commandGADM))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGADM &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EngineerMode
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>commandGCH</STRONG> (Thumb, 282 bytes, Stack size 112 bytes, at_command_list.o(i.commandGCH))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = commandGCH &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxChannel
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioChannelOnOffset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFMappingTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>commandGCHO</STRONG> (Thumb, 180 bytes, Stack size 104 bytes, at_command_list.o(i.commandGCHO))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGCHO &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioChannelOnOffset
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>commandGCPW</STRONG> (Thumb, 132 bytes, Stack size 104 bytes, at_command_list.o(i.commandGCPW))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGCPW &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>commandGGMD</STRONG> (Thumb, 230 bytes, Stack size 104 bytes, at_command_list.o(i.commandGGMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGGMD &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>commandGKEY</STRONG> (Thumb, 306 bytes, Stack size 120 bytes, at_command_list.o(i.commandGKEY))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = commandGKEY &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crcStd16
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferKeyFromStrToNum
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateLoRaMacInitNwkIds
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>commandGLMR</STRONG> (Thumb, 112 bytes, Stack size 104 bytes, at_command_list.o(i.commandGLMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGLMR &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>commandGMTXP</STRONG> (Thumb, 148 bytes, Stack size 104 bytes, at_command_list.o(i.commandGMTXP))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGMTXP &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>commandGPIN</STRONG> (Thumb, 126 bytes, Stack size 104 bytes, at_command_list.o(i.commandGPIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGPIN &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>commandGPT</STRONG> (Thumb, 446 bytes, Stack size 208 bytes, at_command_list.o(i.commandGPT))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = commandGPT &rArr; GetTXPPData &rArr; TxcmConvertStringToNumerical &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTxLED
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTXPPLable
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPingPongMaxTxNumOrRxTimeIdx
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUartImmediately
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXPPData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXCMData
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetProductionTestCommand
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>commandGRST</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, at_command_list.o(i.commandGRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = commandGRST &rArr; SaveConfigToEEPROM &rArr; EncryptConfigToEEPROM &rArr; LoRaMacPayloadEncrypt &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveConfigToEEPROM
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;engineerModeRestoreDefault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>commandGRXC</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, at_command_list.o(i.commandGRXC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGRXC &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxChannel
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetRadioRxBandwidth
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sFMappingTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>commandGSYSC</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, at_command_list.o(i.commandGSYSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGSYSC &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>commandGTXD</STRONG> (Thumb, 138 bytes, Stack size 104 bytes, at_command_list.o(i.commandGTXD))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGTXD &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>commandGUUID</STRONG> (Thumb, 72 bytes, Stack size 104 bytes, at_command_list.o(i.commandGUUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandGUUID &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>commandIBR</STRONG> (Thumb, 146 bytes, Stack size 104 bytes, at_command_list.o(i.commandIBR))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandIBR &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendToUartImmediately
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;baudRateMappingTable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>commandIoTest</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, at_command_list.o(i.commandIoTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = commandIoTest &rArr; GpioTest &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>commandSDEVICETYPE</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, at_command_list.o(i.commandSDEVICETYPE))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = commandSDEVICETYPE &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>commandSGMD</STRONG> (Thumb, 70 bytes, Stack size 96 bytes, at_command_list.o(i.commandSGMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = commandSGMD &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>commandSGMI</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, at_command_list.o(i.commandSGMI))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = commandSGMI &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>commandSGMM</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, at_command_list.o(i.commandSGMM))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = commandSGMM &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>commandSGMR</STRONG> (Thumb, 94 bytes, Stack size 104 bytes, at_command_list.o(i.commandSGMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandSGMR &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>commandSGPIO</STRONG> (Thumb, 154 bytes, Stack size 144 bytes, at_command_list.o(i.commandSGPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = commandSGPIO &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadGpioStatus
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitATInterrupt
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AdcInit
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>commandSIRQ</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, at_command_list.o(i.commandSIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandSIRQ &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>commandSLMR</STRONG> (Thumb, 52 bytes, Stack size 96 bytes, at_command_list.o(i.commandSLMR))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = commandSLMR &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>commandSPROFILE</STRONG> (Thumb, 750 bytes, Stack size 392 bytes, at_command_list.o(i.commandSPROFILE))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + Unknown Stack Size
<LI>Call Chain = commandSPROFILE &rArr; get_sensor_value &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>commandSPWMOD</STRONG> (Thumb, 130 bytes, Stack size 104 bytes, at_command_list.o(i.commandSPWMOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandSPWMOD &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>commandSTIMER</STRONG> (Thumb, 166 bytes, Stack size 104 bytes, at_command_list.o(i.commandSTIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandSTIMER &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>commandSTIMER1</STRONG> (Thumb, 166 bytes, Stack size 104 bytes, at_command_list.o(i.commandSTIMER1))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandSTIMER1 &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>commandTESTBAT</STRONG> (Thumb, 108 bytes, Stack size 104 bytes, at_command_list.o(i.commandTESTBAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandTESTBAT &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calADC
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatDetect
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>commandTESTPINC</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, at_command_list.o(i.commandTESTPINC))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandTESTPINC &rArr; PinTest &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinTest
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>commandTESTPOWER</STRONG> (Thumb, 128 bytes, Stack size 104 bytes, at_command_list.o(i.commandTESTPOWER))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + Unknown Stack Size
<LI>Call Chain = commandTESTPOWER &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR5V
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>commandUPBACKPINC</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, at_command_list.o(i.commandUPBACKPINC))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = commandUPBACKPINC &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_operation_tag
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_app.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>converterStringToAscii</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, at_command_list.o(i.converterStringToAscii))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = converterStringToAscii &rArr; checkVauleFormate &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkVauleFormate
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
</UL>

<P><STRONG><a name="[234]"></a>crcStd16</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, crc16.o(i.crcStd16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crcStd16
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
</UL>

<P><STRONG><a name="[48]"></a>dTTXCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, at_command_list.o(i.dTTXCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dTTXCallback &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> at_command_list.o(i.commandDTTX)
</UL>
<P><STRONG><a name="[1bf]"></a>delay_ms</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart_task.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSensorData
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkBTCommand
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorUp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDown
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTBAT
</UL>

<P><STRONG><a name="[1bd]"></a>engineerModeRestoreDefault</STRONG> (Thumb, 360 bytes, Stack size 8 bytes, at_command_list.o(i.engineerModeRestoreDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = engineerModeRestoreDefault &rArr; RestoreUserConfigToDefault &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RestoreUserConfigToDefault
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRST
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
</UL>

<P><STRONG><a name="[3f]"></a>firstUartRTCAlarm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart_task.o(i.firstUartRTCAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = firstUartRTCAlarm &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[1ed]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = floor &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[1c3]"></a>getPINName</STRONG> (Thumb, 82 bytes, Stack size 4 bytes, uart_task.o(i.getPINName))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getPINName &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PinTest
</UL>

<P><STRONG><a name="[224]"></a>getPincStatus</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, uart_task.o(i.getPincStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getPincStatus &rArr; GpioReadInput
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[232]"></a>get_numerical_value</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, at_command_app.o(i.get_numerical_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = get_numerical_value &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value_addr
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandUPBACKPINC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPOWER
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPINC
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPWMOD
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSIRQ
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSDEVICETYPE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIoTest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIBR
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGTXD
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGSYSC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRXC
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGMTXP
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCHO
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCH
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGADM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandECHO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRXI
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDOWNBACKPINC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCaliRSSI
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCTXP
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSYNC
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSF
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRXC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRPTM
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCPAE
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCHO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCH
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCBAP
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPORT
</UL>

<P><STRONG><a name="[231]"></a>get_operation_tag</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, at_command_app.o(i.get_operation_tag))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandUPBACKPINC
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPOWER
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTPINC
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandTESTBAT
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER1
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSTIMER
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPWMOD
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPROFILE
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSLMR
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSIRQ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGPIO
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMR
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMM
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMI
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSGMD
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSDEVICETYPE
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIoTest
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIBR
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGUUID
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGTXD
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGSYSC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRXC
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRST
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPIN
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGMTXP
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGLMR
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCPW
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCHO
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCH
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGADM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandECHO
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTTX
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRXI
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRX
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDOWNBACKPINC
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCaliRSSI
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCTXP
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSYNC
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSID
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSF
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRXC
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRPTM
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCPIN
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCPAE
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCDEVEUI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCLASS
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCHO
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCH
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCBAP
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPKEY
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPEUI
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPORT
</UL>

<P><STRONG><a name="[238]"></a>get_sensor_value</STRONG> (Thumb, 1846 bytes, Stack size 104 bytes, at_command_app.o(i.get_sensor_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = get_sensor_value &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value_addr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandSPROFILE
</UL>

<P><STRONG><a name="[23a]"></a>get_string_addr</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, at_command_app.o(i.get_string_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_string_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_value
</UL>

<P><STRONG><a name="[235]"></a>get_string_value</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, at_command_app.o(i.get_string_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_string_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_string_addr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGLMR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCPW
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
</UL>

<P><STRONG><a name="[233]"></a>get_value</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, at_command_app.o(i.get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_value &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value_addr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandIoTest
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPIN
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGADM
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDTX
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCNWKSKEY
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCDEVEUI
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCLASS
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPSKEY
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPKEY
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCAPPEUI
</UL>

<P><STRONG><a name="[239]"></a>get_value_addr</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, at_command_app.o(i.get_value_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_value_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_value
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sensor_value
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_numerical_value
</UL>

<P><STRONG><a name="[219]"></a>initPINC0to7</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, uart_task.o(i.initPINC0to7))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = initPINC0to7 &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioWrite
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[205]"></a>irand</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, utilities.o(i.irand))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = irand &rArr; rand1
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand1
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShufflePosition
</UL>

<P><STRONG><a name="[9f]"></a>main</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = main &rArr; BoardInitPeriph &rArr; RtcInit &rArr; RtcSetConfig &rArr; HAL_RTC_Init &rArr; HAL_RTC_MspInit &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerTaskQueue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BoardInitPeriph
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[20b]"></a>osSystickHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmsis_os.o(i.osSystickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSystickHandler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[134]"></a>parseTXCMdata</STRONG> (Thumb, 542 bytes, Stack size 32 bytes, production.o(i.parseTXCMdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parseTXCMdata &rArr; RemoveEndChar &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEndChar
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXCMData
</UL>

<P><STRONG><a name="[137]"></a>parseTXPPdata</STRONG> (Thumb, 776 bytes, Stack size 32 bytes, production.o(i.parseTXPPdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parseTXPPdata &rArr; RemoveEndChar &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RemoveEndChar
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTXPPData
</UL>

<P><STRONG><a name="[eb]"></a>parse_command_buffer</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, at_command_app.o(i.parse_command_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = parse_command_buffer &rArr; strncasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncasecmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
</UL>

<P><STRONG><a name="[f0]"></a>print_result</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at_command_app.o(i.print_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = print_result &rArr; SendMsgToUart &rArr; SendQueueToUartTask &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendMsgToUart
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
</UL>

<P><STRONG><a name="[18a]"></a>pvPortMalloc</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationMallocFailedHook
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setUART
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_previous_commandbuffer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[26f]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[272]"></a>pxPortInitialiseStack</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[1c7]"></a>radioInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, radio_task.o(i.radioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = radioInit &rArr; SX1276Init &rArr; RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand1
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readVersionID
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetModem
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetCallback
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IoInit
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetClassMode
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[23b]"></a>rand1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, utilities.o(i.rand1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rand1
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irand
</UL>

<P><STRONG><a name="[25d]"></a>readVersionID</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx1276.o(i.readVersionID))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = readVersionID &rArr; SX1276Read &rArr; SpiReadBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[1eb]"></a>round</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = round &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
</UL>

<P><STRONG><a name="[196]"></a>sFMappingTable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at_command_list.o(i.sFMappingTable))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRXC
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGCH
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSF
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCRXC
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCCH
</UL>

<P><STRONG><a name="[3e]"></a>sendBindAP</STRONG> (Thumb, 72 bytes, Stack size 80 bytes, uart_task.o(i.sendBindAP))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = sendBindAP &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEEPROMConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.UartTask)
</UL>
<P><STRONG><a name="[226]"></a>sendControlPinReply</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, uart_task.o(i.sendControlPinReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sendControlPinReply &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[223]"></a>sendMotorReply</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, uart_task.o(i.sendMotorReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sendMotorReply &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[225]"></a>sendQueryPinReply</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, uart_task.o(i.sendQueryPinReply))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = sendQueryPinReply &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[10b]"></a>sendSensorData</STRONG> (Thumb, 418 bytes, Stack size 144 bytes, uart_task.o(i.sendSensorData))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = sendSensorData &rArr; SendQueueToRadio &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioReadInput
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetEEPROMConfig
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calADC
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatDetect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor3ReplyCallback
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor2ReplyCallback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSensor1ReplyCallback
</UL>

<P><STRONG><a name="[21b]"></a>setUART</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, uart_task.o(i.setUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = setUART &rArr; UartConfig &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartConfig
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoInit
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorSB
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorParity
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorDB
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorBaudRate
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[25e]"></a>srand1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utilities.o(i.srand1))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;radioInit
</UL>

<P><STRONG><a name="[47]"></a>stopMptorCallback</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, uart_task.o(i.stopMptorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = stopMptorCallback &rArr; MotorUp &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorUp
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorDown
</UL>
<BR>[Address Reference Count : 1]<UL><LI> uart_task.o(i.checkBTCommand)
</UL>
<P><STRONG><a name="[21d]"></a>toSleep</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart_task.o(i.toSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = toSleep &rArr; RtcStartWakeUpAlarm &rArr; HAL_RTC_SetAlarm_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtcStartWakeUpAlarm
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR5V
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Max485RW
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
</UL>

<P><STRONG><a name="[18b]"></a>unUsedGpioInit</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, at_command_list.o(i.unUsedGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = unUsedGpioInit &rArr; GpioInit &rArr; GpioWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioInit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
</UL>

<P><STRONG><a name="[194]"></a>updateLoRaMacInitNwkIds</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, at_command_list.o(i.updateLoRaMacInitNwkIds))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = updateLoRaMacInitNwkIds &rArr; TransferKeyFromStrToNum &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRaMacInitNwkIds
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TransferKeyFromStrToNum
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitAtCommandList
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGKEY
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGGMD
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCMAC
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCKEY
</UL>

<P><STRONG><a name="[248]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[25b]"></a>vApplicationMallocFailedHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.vApplicationMallocFailedHook))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[269]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[252]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[250]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
</UL>

<P><STRONG><a name="[242]"></a>vListInsert</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[266]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[247]"></a>vPortEnterCritical</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[249]"></a>vPortExitCritical</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1c8]"></a>vPortFree</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveRadioRxData
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Disable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backup_previous_commandbuffer
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandDRXI
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
</UL>

<P><STRONG><a name="[24e]"></a>vPortYield</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, port.o(i.vPortYield))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[142]"></a>vTaskDelay</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Send
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Random
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276IsChannelFree
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGPT
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandCSQ
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GpioTest
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Reset
</UL>

<P><STRONG><a name="[258]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[265]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[267]"></a>vTaskPriorityInherit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[270]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[23d]"></a>vTaskStartScheduler</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[245]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[a5]"></a>vTaskSwitchContext</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[268]"></a>xPortStartScheduler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler &rArr; prvSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvPortStartFirstTask
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSetupTimerInterrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[240]"></a>xPortSysTickHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[113]"></a>xQueueCreateMutex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateMutex &rArr; xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerTaskQueue
</UL>

<P><STRONG><a name="[112]"></a>xQueueGenericCreate</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CreateTimerTaskQueue
</UL>

<P><STRONG><a name="[100]"></a>xQueueGenericReceive</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericReceive &rArr; prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemainTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTask
</UL>

<P><STRONG><a name="[26e]"></a>xQueueGenericReset</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[102]"></a>xQueueGenericSend</STRONG> (Thumb, 334 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSend &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetRemainTime
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeleteTimer
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddTimer
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadio
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerTask
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTask
</UL>

<P><STRONG><a name="[1fe]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 178 bytes, Stack size 48 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vClearInterruptMaskFromISR
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulSetInterruptMaskFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerStateCallback
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToRadioFromISR
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendQueueToUartTaskFromISR
</UL>

<P><STRONG><a name="[271]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[23c]"></a>xTaskGenericCreate</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, tasks.o(i.xTaskGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskGenericCreate &rArr; prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTCBVariables
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAllocateTCBAndStack
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[23f]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSystickHandler
</UL>

<P><STRONG><a name="[26c]"></a>xTaskIncrementTick</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[24d]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[257]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[246]"></a>xTaskResumeAll</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[33]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[20e]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxcmConvertStringToNumerical
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[274]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[1ec]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276GetTimeOnAir
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[275]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPinVoltage
</UL>

<P><STRONG><a name="[2b7]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1be]"></a>NVIC_SystemReset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at_command_list.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandGRST
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadNodeConfigFromEEPROM
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoadAtConfigFromEEPROM
</UL>

<P><STRONG><a name="[ed]"></a>NVIC_SystemReset</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at_command_app.o(i.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATCommandParser
</UL>

<P><STRONG><a name="[dc]"></a>ADC_ConversionStop</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_ConversionStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ConversionStop
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[de]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
</UL>

<P><STRONG><a name="[e0]"></a>ADC_Disable</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Stop
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_DeInit
</UL>

<P><STRONG><a name="[e1]"></a>ADC_Enable</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32l0xx_hal_adc.o(i.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Enable &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[14c]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32l0xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[147]"></a>FLASH_Program_Word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.FLASH_Program_Word))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
</UL>

<P><STRONG><a name="[122]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, stm32l0xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[167]"></a>SPI_WaitOnFlagUntilTimeout</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, stm32l0xx_hal_spi.o(i.SPI_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[16a]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, stm32l0xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[179]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32l0xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>UART_Receive_IT</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32l0xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; HAL_UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[178]"></a>UART_Transmit_IT</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32l0xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>FifoNext</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, fifo.o(i.FifoNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FifoNext &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPush
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FifoPop
</UL>

<P><STRONG><a name="[228]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[22a]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[23e]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[22d]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(i.copy_block_nn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[22b]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[22c]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[229]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[24b]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[24c]"></a>prvCopyDataToQueue</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvCopyDataToQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[253]"></a>prvIsQueueEmpty</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[254]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[256]"></a>prvUnlockQueue</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[241]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[243]"></a>prvAllocateTCBAndStack</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, tasks.o(i.prvAllocateTCBAndStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvAllocateTCBAndStack &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[244]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[24a]"></a>prvDeleteTCB</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[4e]"></a>prvIdleTask</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[24f]"></a>prvInitialiseTCBVariables</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tasks.o(i.prvInitialiseTCBVariables))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvInitialiseTCBVariables
</UL>
<BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[251]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGenericCreate
</UL>

<P><STRONG><a name="[273]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[255]"></a>prvSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, port.o(i.prvSetupTimerInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvSetupTimerInterrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4c]"></a>prvTaskExitError</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[259]"></a>prvHeapInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[25a]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1f9]"></a>GetFskBandwidthRegValue</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sx1276.o(i.GetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetRxConfig
</UL>

<P><STRONG><a name="[1e6]"></a>RxChainCalibration</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, sx1276.o(i.RxChainCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RxChainCalibration &rArr; SX1276SetChannel &rArr; SX1276Write &rArr; SpiWriteBuffer &rArr; SpiInOut &rArr; HAL_SPI_TransmitReceive &rArr; SPI_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276SetChannel
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Read
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1276Init
</UL>

<P><STRONG><a name="[c5]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[c4]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[34]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[da]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[d1]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[ab]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[ac]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
